// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  profile   Profile?
  role      String     @default("user")
  posts     Post[]
  like      Like[]
  followers Follow[]   @relation(name: "FollowingRelation")
  following Follow[]   @relation(name: "FollowerRelation")
  comment   Comment[]
  bookmark  Bookmark[]
}

model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Post {
  id        Int        @id @default(autoincrement())
  caption   String
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  like      Like[]
  comment   Comment[]
  bookmar   Bookmark[]
}

model Follow {
  id Int @id @default(autoincrement())

  follower   User @relation(name: "FollowerRelation", fields: [followerId], references: [id])
  followerId Int

  following   User @relation(name: "FollowingRelation", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model Comment {
  id       Int      @id @default(autoincrement())
  content  String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  post     Post     @relation(fields: [postId], references: [id])
  postId   Int
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  postId Int

  user User @relation(fields: [userId], references: [id], map: "Bookmark_userId_fkey")
  post Post @relation(fields: [postId], references: [id], map: "Bookmark_postId_fkey")

  @@unique([userId, postId])
}
